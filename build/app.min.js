/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redux = __webpack_require__(1);
	
	// culture data, object and pre-sorted array of display names;
	var cultures = __webpack_require__(15).cultures;
	var cultures_list = __webpack_require__(15).cultures_list;
	
	// DOM references to select/option tags & shuffle btn
	var select_culture = document.getElementById('culture');
	var select_first_value = document.getElementById('first_value');
	var select_second_value = document.getElementById('second_value');
	var shuffle_button = document.getElementById('shuffle');
	
	// initial Cultures and Values chosen at random
	var initial_culture = randomCulture();
	var initial_state = {
	  culture: initial_culture,
	  first_value: randomValue(initial_culture),
	  second_value: randomValue(initial_culture)
	};
	
	// redux, see reducer
	
	var store = (0, _redux.createStore)(reducer);
	
	// initial application setup
	(function init() {
	  updateBackgroundGradient();
	  populateOptions();
	  populateCultures();
	  synchronizeSelectInputs();
	  updateCurrentHexToDOM();
	  store.subscribe(render);
	  console.log('INIT: ', store.getState());
	  shuffle_button.addEventListener('click', dispatchShuffle);
	  __webpack_require__(16)();
	})();
	
	// callback to run after every redux state change
	function render() {
	  updateBackgroundGradient();
	  populateOptions();
	  synchronizeSelectInputs();
	  updateCurrentHexToDOM();
	  console.log('RENDER: ', store.getState());
	}
	
	// takes a Culture and two Values, returns them as object/state
	function newState(culture, first_value, second_value) {
	  return { culture: culture, first_value: first_value, second_value: second_value };
	}
	
	function reducer(state, action) {
	  console.log('ACTION: ', action);
	  switch (action.type) {
	
	    case '@@redux/INIT':
	      return initial_state;
	
	    case 'CULTURE_CHANGE':
	      return newState(action.culture, randomValue(action.culture), randomValue(action.culture));
	
	    case 'VALUE_CHANGE':
	      var prev_store = store.getState();
	      if (action.side === 'LEFT') {
	        return newState(prev_store.culture, action.value, prev_store.second_value);
	      } else if (action.side === 'RIGHT') {
	        return newState(prev_store.culture, prev_store.first_value, action.value);
	      } else {
	        return state;
	      }
	
	    case 'SHUFFLE':
	      var rand_cult = randomCulture();
	      return newState(rand_cult, randomValue(rand_cult), randomValue(rand_cult));
	
	    default:
	      return state;
	  }
	}
	
	// updates background colors based on the current state
	function updateBackgroundGradient() {
	  var curr_state = store.getState();
	  var curr_culture = curr_state.culture;
	  var first_value = curr_state.first_value;
	  var second_value = curr_state.second_value;
	  var left_color = cultures[curr_culture][first_value];
	  var right_color = cultures[curr_culture][second_value];
	  var linear_gradient = 'linear-gradient(to right,' + left_color + ',' + right_color + ')';
	  document.body.style.background = linear_gradient;
	}
	
	// updates Culture and Values select tags to match user's choice
	function synchronizeSelectInputs() {
	  var state = store.getState();
	  var curr_culture_keys = Object.keys(cultures[state.culture]);
	  select_first_value.selectedIndex = curr_culture_keys.indexOf(state.first_value);
	  select_second_value.selectedIndex = curr_culture_keys.indexOf(state.second_value);
	  select_culture.selectedIndex = cultures_list.indexOf(store.getState().culture);
	}
	
	// clear Values and new options based on current Culture
	function populateOptions() {
	  select_first_value.innerHTML = select_second_value.innerHTML = '';
	  var state = store.getState();
	  var curr_culture_keys = Object.keys(cultures[state.culture]);
	  curr_culture_keys.forEach(add_option_value_to_select);
	}
	
	// adds a Value option to both select inputs
	function add_option_value_to_select(value) {
	  select_first_value.add(option_constructor(value));
	  select_second_value.add(option_constructor(value));
	}
	
	// constructs an option element given a Value
	function option_constructor(value) {
	  var option = document.createElement("option");
	  option.text = value;
	  option.nodeValue = value;
	  return option;
	}
	
	// populates the Culture input with options
	function populateCultures() {
	  select_culture.innerHTML = '';
	  cultures_list.forEach(function (culture) {
	    select_culture.add(option_constructor(culture));
	  });
	}
	
	// handler for left/right Values, dispatches action for value change
	function valueSelectHandler(event) {
	  var SIDE = event.target.id === 'first_value' ? 'LEFT' : 'RIGHT';
	  store.dispatch({
	    type: 'VALUE_CHANGE',
	    side: SIDE,
	    value: event.target.value
	  });
	}
	
	// handler for left/right Values, dispatches action for culture change
	function cultureSelectHandler(event) {
	  store.dispatch({
	    type: 'CULTURE_CHANGE',
	    culture: event.target.value
	  });
	}
	
	// handler for shuffle button, shuffles state
	function dispatchShuffle(e) {
	  store.dispatch({ type: 'SHUFFLE' });
	}
	
	// returns a random Value given a Culture
	function randomValue(culture) {
	  var culture_keys = Object.keys(cultures[culture]);
	  var rand_key = Math.floor(Math.random() * culture_keys.length);
	  return culture_keys[rand_key];
	}
	
	// returns a random Culture
	function randomCulture() {
	  var rand_key = Math.floor(Math.random() * cultures_list.length);
	  return cultures_list[rand_key];
	}
	
	// object lookup for current state's hex values, renders/updates to DOM
	function updateCurrentHexToDOM() {
	  var curr_state = store.getState();
	  var left_color = cultures[curr_state.culture][curr_state.first_value];
	  var right_color = cultures[curr_state.culture][curr_state.second_value];
	  document.getElementById('left_color_hex').innerText = left_color;
	  document.getElementById('right_color_hex').innerText = right_color;
	}

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;
	
	var _createStore = __webpack_require__(3);
	
	var _createStore2 = _interopRequireDefault(_createStore);
	
	var _combineReducers = __webpack_require__(10);
	
	var _combineReducers2 = _interopRequireDefault(_combineReducers);
	
	var _bindActionCreators = __webpack_require__(12);
	
	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);
	
	var _applyMiddleware = __webpack_require__(13);
	
	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);
	
	var _compose = __webpack_require__(14);
	
	var _compose2 = _interopRequireDefault(_compose);
	
	var _warning = __webpack_require__(11);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}
	
	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2["default"])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}
	
	exports.createStore = _createStore2["default"];
	exports.combineReducers = _combineReducers2["default"];
	exports.bindActionCreators = _bindActionCreators2["default"];
	exports.applyMiddleware = _applyMiddleware2["default"];
	exports.compose = _compose2["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 2 */
/***/ function(module, exports) {

	// shim for using process in browser
	
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	(function () {
	  try {
	    cachedSetTimeout = setTimeout;
	  } catch (e) {
	    cachedSetTimeout = function () {
	      throw new Error('setTimeout is not defined');
	    }
	  }
	  try {
	    cachedClearTimeout = clearTimeout;
	  } catch (e) {
	    cachedClearTimeout = function () {
	      throw new Error('clearTimeout is not defined');
	    }
	  }
	} ())
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = cachedSetTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    cachedClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        cachedSetTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports["default"] = createStore;
	
	var _isPlainObject = __webpack_require__(4);
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _symbolObservable = __webpack_require__(8);
	
	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'
	};
	
	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [initialState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} enhancer The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */
	function createStore(reducer, initialState, enhancer) {
	  var _ref2;
	
	  if (typeof initialState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = initialState;
	    initialState = undefined;
	  }
	
	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }
	
	    return enhancer(createStore)(reducer, initialState);
	  }
	
	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }
	
	  var currentReducer = reducer;
	  var currentState = initialState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;
	
	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }
	
	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }
	
	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }
	
	    var isSubscribed = true;
	
	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);
	
	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }
	
	      isSubscribed = false;
	
	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }
	
	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2["default"])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }
	
	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }
	
	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }
	
	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }
	
	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i]();
	    }
	
	    return action;
	  }
	
	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }
	
	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }
	
	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/zenparsing/es-observable
	   */
	  function observable() {
	    var _ref;
	
	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object') {
	          throw new TypeError('Expected the observer to be an object.');
	        }
	
	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }
	
	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return { unsubscribe: unsubscribe };
	      }
	    }, _ref[_symbolObservable2["default"]] = function () {
	      return this;
	    }, _ref;
	  }
	
	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });
	
	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[_symbolObservable2["default"]] = observable, _ref2;
	}

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var getPrototype = __webpack_require__(5),
	    isHostObject = __webpack_require__(6),
	    isObjectLike = __webpack_require__(7);
	
	/** `Object#toString` result references. */
	var objectTag = '[object Object]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object,
	 *  else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) ||
	      objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}
	
	module.exports = isPlainObject;


/***/ },
/* 5 */
/***/ function(module, exports) {

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetPrototype = Object.getPrototypeOf;
	
	/**
	 * Gets the `[[Prototype]]` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {null|Object} Returns the `[[Prototype]]`.
	 */
	function getPrototype(value) {
	  return nativeGetPrototype(Object(value));
	}
	
	module.exports = getPrototype;


/***/ },
/* 6 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}
	
	module.exports = isHostObject;


/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}
	
	module.exports = isObjectLike;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/* global window */
	'use strict';
	
	module.exports = __webpack_require__(9)(global || window || this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function symbolObservablePonyfill(root) {
		var result;
		var Symbol = root.Symbol;
	
		if (typeof Symbol === 'function') {
			if (Symbol.observable) {
				result = Symbol.observable;
			} else {
				result = Symbol('observable');
				Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}
	
		return result;
	};


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	exports["default"] = combineReducers;
	
	var _createStore = __webpack_require__(3);
	
	var _isPlainObject = __webpack_require__(4);
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _warning = __webpack_require__(11);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';
	
	  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';
	}
	
	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'initialState argument passed to createStore' : 'previous state received by the reducer';
	
	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }
	
	  if (!(0, _isPlainObject2["default"])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }
	
	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key);
	  });
	
	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}
	
	function assertReducerSanity(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });
	
	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
	    }
	
	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
	    }
	  });
	}
	
	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];
	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);
	
	  var sanityError;
	  try {
	    assertReducerSanity(finalReducers);
	  } catch (e) {
	    sanityError = e;
	  }
	
	  return function combination() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var action = arguments[1];
	
	    if (sanityError) {
	      throw sanityError;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action);
	      if (warningMessage) {
	        (0, _warning2["default"])(warningMessage);
	      }
	    }
	
	    var hasChanged = false;
	    var nextState = {};
	    for (var i = 0; i < finalReducerKeys.length; i++) {
	      var key = finalReducerKeys[i];
	      var reducer = finalReducers[key];
	      var previousStateForKey = state[key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports["default"] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}
	
	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }
	
	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }
	
	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports["default"] = applyMiddleware;
	
	var _compose = __webpack_require__(14);
	
	var _compose2 = _interopRequireDefault(_compose);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }
	
	  return function (createStore) {
	    return function (reducer, initialState, enhancer) {
	      var store = createStore(reducer, initialState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];
	
	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2["default"].apply(undefined, chain)(store.dispatch);
	
	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */
	
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	
	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  } else {
	    var _ret = function () {
	      var last = funcs[funcs.length - 1];
	      var rest = funcs.slice(0, -1);
	      return {
	        v: function v() {
	          return rest.reduceRight(function (composed, f) {
	            return f(composed);
	          }, last.apply(undefined, arguments));
	        }
	      };
	    }();
	
	    if (typeof _ret === "object") return _ret.v;
	  }
	}

/***/ },
/* 15 */
/***/ function(module, exports) {

	'use strict';
	
	var _eastern_european;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	// src (for most): https://flatuicolors.com/
	var RED = '#E74C3C',
	    ORANGE = '#E67E22',
	    PURPLE = '#9B59B6',
	    BLUE = '#2980B9',
	    PINK = '#E91E63',
	    YELLOW = '#F1C40F',
	    GOLD = '#F39C12',
	    GREEN = '#2ECC71',
	    GREY = '#7F8C8D',
	    SILVER = '#BDC3C7',
	    WHITE = '#ECF0F1',
	    BLACK = '#000000',
	    BROWN = '#795548';
	
	// infographic inspiration:
	// http://www.informationisbeautiful.net/visualizations/colours-in-cultures/
	
	var western = {
	    'Anger': RED,
	    'Authority': BLACK,
	    'Beauty': PURPLE,
	    'Children': PINK,
	    'Cold': BLUE,
	    'Courage': ORANGE,
	    'Cowardice': YELLOW,
	    'Cruelty': PURPLE,
	    'Danger': RED,
	    'Death': BLACK,
	    'Decadence': PURPLE,
	    'Desire': RED,
	    'Earthy': BROWN,
	    'Energy': YELLOW,
	    'Erotic': ORANGE,
	    'Femininity': PINK,
	    'Flamboyance': PURPLE,
	    'Freedom': BLUE,
	    'Friendly': ORANGE,
	    'Fun': YELLOW,
	    'Good Luck': GREEN,
	    'Growth': GREEN,
	    'Happiness': YELLOW,
	    'Healing': BLUE,
	    'Heat': RED,
	    'Heaven': WHITE,
	    'Intelligence': BLUE,
	    'Jealousy': GREEN,
	    'Love': RED,
	    'Loyalty': BLUE,
	    'Luxury': WHITE,
	    'Marriage': WHITE,
	    'Modesty': PURPLE,
	    'Money': GOLD,
	    'Mourning': BLACK,
	    'Mystery': PURPLE,
	    'Nature': GREEN,
	    'Passion': RED,
	    'Peace': YELLOW,
	    'Personal Power': PURPLE,
	    'Purity': WHITE,
	    'Radicalism': RED,
	    'Rational': BLUE,
	    'Reliable': BROWN,
	    'Repels Evil': YELLOW,
	    'Respect': GREY,
	    'Style': BLACK,
	    'Truce': WHITE,
	    'Unhappiness': BLUE,
	    'Virtue': PURPLE
	};
	
	var japanese = {
	    'Art/Creativity': RED,
	    'Bad Luck': BLACK,
	    'Balance': ORANGE,
	    'Celebration': PURPLE,
	    'Children': PINK,
	    'Cold': BLUE,
	    'Courage': YELLOW,
	    'Cowardice': YELLOW,
	    'Danger': RED,
	    'Death': BLACK,
	    'Decadence': PURPLE,
	    'Deceit': YELLOW,
	    'Desire': RED,
	    'Energy': ORANGE,
	    'Erotic': PINK,
	    'Eternity': GREEN,
	    'Evil': BLACK,
	    'Excitement': RED,
	    'Flamboyance': ORANGE,
	    'God': PURPLE,
	    'Good Luck': GREEN,
	    'Healthy': PINK,
	    'Heaven': YELLOW,
	    'Holiness': WHITE,
	    'Ilness': YELLOW,
	    'Insight': PURPLE,
	    'Intelligence': SILVER,
	    'Religion': YELLOW,
	    'Jealousy': GREEN,
	    'Joy': YELLOW,
	    'Life': BLUE,
	    'Love': RED,
	    'Loyalty': BLUE,
	    'Modesty': GREY,
	    'Money': BLUE,
	    'Mystery': PURPLE,
	    'Nature': GREEN,
	    'Passion': RED,
	    'Peace': BLUE,
	    'Purity': WHITE,
	    'Rational': BLUE,
	    'Reliable': GREY,
	    'Repels Evil': RED,
	    'Respect': WHITE,
	    'Strength': RED,
	    'Style': BLACK,
	    'Truce': WHITE,
	    'Unhappiness': BLACK,
	    'Warmth': ORANGE,
	    'Wisdom': PURPLE
	};
	
	var hindu = {
	    'Anger': BLACK,
	    'Art/Creativity': BLUE,
	    'Compassion': GREEN,
	    'Courage': ORANGE,
	    'Death': WHITE,
	    'Desire': ORANGE,
	    'Energy': RED,
	    'Erotic': RED,
	    'Evil': BLACK,
	    'Fun': YELLOW,
	    'God': YELLOW,
	    'Gods': BLUE,
	    'Happiness': GREEN,
	    'Heat': RED,
	    'Illness': YELLOW,
	    'Insight': GREEN,
	    'Intelligence': WHITE,
	    'Intuition': PURPLE,
	    'Religion': GREEN,
	    'Joy': YELLOW,
	    'Life': GREEN,
	    'Love': GREEN,
	    'Marriage': RED,
	    'Passion': RED,
	    'Peace': WHITE,
	    'Penance': BLACK,
	    'Personal Power': YELLOW,
	    'Repels Evil': YELLOW,
	    'Truce': WHITE,
	    'Wisdom': PURPLE
	};
	
	var native_american = {
	    'Balance': BLACK,
	    'Cold': BLUE,
	    'Danger': YELLOW,
	    'Death': BLACK,
	    'Friendly': GREY,
	    'Gratitude': PURPLE,
	    'Happiness': WHITE,
	    'Healing': ORANGE,
	    'Insight': YELLOW,
	    'Intuition': BLUE,
	    'Learning': ORANGE,
	    'Love': YELLOW,
	    'Passion': RED,
	    'Peace': WHITE,
	    'Personal Power': GREEN,
	    'Respect': SILVER,
	    'Self-Cultivation': BLACK,
	    'Success': RED,
	    'Trouble': BLUE,
	    'Unhappiness': BLUE,
	    'Wisdom': BROWN
	};
	
	var chinese = {
	    'Celebration': BLACK,
	    'Death': WHITE,
	    'Earthy': BROWN,
	    'Family': ORANGE,
	    'Fertility': RED,
	    'Good Luck': RED,
	    'Growth': GREEN,
	    'Happiness': RED,
	    'Healthy': YELLOW,
	    'Learning': ORANGE,
	    'Life': GREEN,
	    'Marriage': RED,
	    'Mourning': WHITE,
	    'Repels Evil': GREEN,
	    'Respect': YELLOW,
	    'Royalty': YELLOW,
	    'Success': RED,
	    'Money': GOLD,
	    'Purity': WHITE,
	    'Truce': WHITE
	};
	
	var asian = {
	    'Balance': GREEN,
	    'Children': WHITE,
	    'Eternity': GREEN,
	    'Evil': BLACK,
	    'Excitement': GREEN,
	    'Flamboyance': PURPLE,
	    'Happiness': RED,
	    'Holiness': YELLOW,
	    'Intelligence': BLACK,
	    'Money': GOLD,
	    'Penance': BLACK,
	    'Power': YELLOW,
	    'Purity': WHITE,
	    'Repels Evil': YELLOW,
	    'Self Cultivation': BLACK,
	    'Strength': YELLOW,
	    'Success': RED
	};
	
	var eastern_european = (_eastern_european = {
	    'Anger': RED,
	    'Heat': RED,
	    'Beauty': RED,
	    'Good Luck': RED
	}, _defineProperty(_eastern_european, 'Heat', RED), _defineProperty(_eastern_european, 'Love', RED), _defineProperty(_eastern_european, 'Loyalty', BLUE), _defineProperty(_eastern_european, 'Mourning', YELLOW), _defineProperty(_eastern_european, 'Passion', RED), _defineProperty(_eastern_european, 'Power', RED), _defineProperty(_eastern_european, 'Radicalism', RED), _defineProperty(_eastern_european, 'Truce', WHITE), _defineProperty(_eastern_european, 'Trust', WHITE), _defineProperty(_eastern_european, 'Virtue', BLUE), _defineProperty(_eastern_european, 'Wisdom', BLUE), _eastern_european);
	
	var muslim = {
	    'Death': SILVER,
	    'God': GREEN,
	    'Good Luck': GREEN,
	    'Heat': RED,
	    'Heaven': GREEN,
	    'Religion': GREEN,
	    'Peace': SILVER,
	    'Purity': SILVER,
	    'Strength': YELLOW,
	    'Truce': SILVER
	};
	
	var african = {
	    'Anger': RED,
	    'Good Luck': RED,
	    'Religion': GREEN,
	    'Learning': GREEN,
	    'Life': BLUE,
	    'Peace': BLUE,
	    'Success': GREEN,
	    'Truce': GREY
	};
	
	var south_american = {
	    'Danger': RED,
	    'Death': GREEN,
	    'Mourning': PURPLE,
	    'Success': RED,
	    'Trouble': BLUE
	};
	
	// String->Object lookup table
	var cultures = {
	    'Western': western,
	    'Japanese': japanese,
	    'Hindu': hindu,
	    'Native American': native_american,
	    'Chinese': chinese,
	    'Asian': asian,
	    'Eastern European': eastern_european,
	    'Muslim': muslim,
	    'African': african,
	    'South American': south_american
	};
	
	// alphabetized array of cultures
	var cultures_list = ["African", "Asian", "Chinese", "Eastern European", "Hindu", "Japanese", "Muslim", "Native American", "South American", "Western"];
	
	exports.cultures = cultures;
	exports.cultures_list = cultures_list;

/***/ },
/* 16 */
/***/ function(module, exports) {

	'use strict';
	
	// 1. Google Analytics
	// 2. rotates throughout the flat UI colors for the heart at the border-bottom.
	// 3. 3rd-party library for inline-tweets sharing functionality.
	
	module.exports = function () {
	    'use strict';
	
	    (function (i, s, o, g, r, a, m) {
	        i['GoogleAnalyticsObject'] = r;i[r] = i[r] || function () {
	            (i[r].q = i[r].q || []).push(arguments);
	        }, i[r].l = 1 * new Date();a = s.createElement(o), m = s.getElementsByTagName(o)[0];a.async = 1;a.src = g;m.parentNode.insertBefore(a, m);
	    })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
	    ga('create', 'UA-76555000-1', 'auto');
	    ga('send', 'pageview');
	    // loops through heart icon (footer) colors
	    var $heart = document.getElementById('#heart');
	    var flatUIColors = ['#34495e', '#5900ff', '#9b59b6', '#3498db', '#2ecc71', '#1abc9c', '#f1c40f', '#ecf0f1', '#e67e22', '#e74c3c', '#95a5a6'];
	    var counter = 0;
	    var updateInterval = 1000;
	    setInterval(function changeHeartColor() {
	        if (!flatUIColors[counter]) counter = 0;
	        heart.style.color = flatUIColors[counter++];
	    }, updateInterval);
	    // inlineTweet.js
	    function buildInlineTweet(e) {
	        var t = e.innerHTML,
	            i = "%22" + encodeURIComponent(t) + "%22",
	            n = e.dataset.inlineTweetUrl ? e.dataset.inlineTweetUrl : window.location.href,
	            a = e.dataset.inlineTweetVia ? "&via=" + e.dataset.inlineTweetVia : "",
	            r = e.dataset.inlineTweetTags ? "&hashtags=" + e.dataset.inlineTweetTags : "",
	            l = "https://twitter.com/intent/tweet/?text=" + i + "&url=" + n + a + r,
	            d = document.createElement("span");
	        d.innerHTML = t;
	        var s = document.createElement("a");
	        s.target = "_blank", s.href = l, s.appendChild(d), s.innerHTML += twitterLogo, e.innerHTML = "", e.appendChild(s);
	    }
	    var inlineTweets = document.querySelectorAll("*[data-inline-tweet]");
	    if (inlineTweets) for (var twitterLogo = '<svg style="height: 0.7em;" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" version="1.1" xmlns:cc="http://creativecommons.org/ns#" viewBox="0 0 182.66667 150.66667" xmlns:dc="http://purl.org/dc/elements/1.1/"><metadata id="metadata8"><rdf:RDF><cc:Work rdf:about=""><dc:format>image/svg+xml</dc:format><dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/></cc:Work></rdf:RDF></metadata><defs id="defs6"><clipPath id="clipPath20" clipPathUnits="userSpaceOnUse"><path id="path18" d="m0 10.012h1366.9v1110.9h-1366.9z"/></clipPath></defs><g id="g10" transform="matrix(1.3333 0 0 -1.3333 0 150.67)"><g id="g12" transform="scale(.1)"><g id="g14"><g id="g16" clip-path="url(#clipPath20)"><path id="path22" d="m1366.9 989.39c-50.27-22.309-104.33-37.387-161.05-44.18 57.89 34.723 102.34 89.679 123.28 155.15-54.18-32.15-114.18-55.47-178.09-68.04-51.13 54.49-124.02 88.55-204.68 88.55-154.89 0-280.43-125.55-280.43-280.43 0-21.988 2.457-43.398 7.258-63.91-233.08 11.68-439.72 123.36-578.04 293.01-24.141-41.4-37.969-89.567-37.969-140.97 0-97.308 49.489-183.13 124.76-233.44-45.969 1.437-89.218 14.058-127.03 35.078-0.043-1.18-0.043-2.348-0.043-3.52 0-135.9 96.68-249.22 224.96-275-23.512-6.41-48.281-9.8-73.86-9.8-18.089 0-35.628 1.711-52.781 5 35.711-111.41 139.26-192.5 262-194.77-96.058-75.23-216.96-120.04-348.36-120.04-22.621 0-44.961 1.332-66.918 3.91 124.16-79.568 271.55-125.98 429.94-125.98 515.82 0 797.86 427.31 797.86 797.93 0 12.153-0.28 24.223-0.79 36.25 54.77 39.571 102.31 88.95 139.93 145.2" fill="#55ACEE"/></g></g></g></g></svg>', i = 0; i < inlineTweets.length; i++) {
	        buildInlineTweet(inlineTweets[i]);
	    }
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
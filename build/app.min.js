/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// culture data, object and pre-sorted array of display names;
	var cultures = __webpack_require__(1).cultures;
	var cultures_list = __webpack_require__(1).cultures_list;
	
	// DOM references to select/option tags & shuffle btn
	var select_culture = document.getElementById('culture');
	var select_first_value = document.getElementById('first_value');
	var select_second_value = document.getElementById('second_value');
	var shuffle_button = document.getElementById('shuffle');
	
	// initial Cultures and Values chosen at random
	var initial_culture = randomCulture();
	var initial_state = {
	  culture: initial_culture,
	  first_value: randomValue(initial_culture),
	  second_value: randomValue(initial_culture)
	};
	
	// redux, see reducer
	var store = Redux.createStore(reducer);
	
	// initial application setup
	(function init() {
	  updateBackgroundGradient();
	  populateOptions();
	  populateCultures();
	  synchronizeSelectInputs();
	  updateCurrentHexToDOM();
	  store.subscribe(render);
	  console.log('INIT: ', store.getState());
	  shuffle_button.addEventListener('click', dispatchShuffle);
	  __webpack_require__(2)();
	})();
	
	// callback to run after every redux state change
	function render() {
	  updateBackgroundGradient();
	  populateOptions();
	  synchronizeSelectInputs();
	  updateCurrentHexToDOM();
	  console.log('RENDER: ', store.getState());
	}
	
	// takes a Culture and two Values, returns them as object/state
	function newState(culture, first_value, second_value) {
	  return { culture: culture, first_value: first_value, second_value: second_value };
	}
	
	function reducer(state, action) {
	  console.log('ACTION: ', action);
	  switch (action.type) {
	
	    case '@@redux/INIT':
	      return initial_state;
	
	    case 'CULTURE_CHANGE':
	      return newState(action.culture, randomValue(action.culture), randomValue(action.culture));
	
	    case 'VALUE_CHANGE':
	      var prev_store = store.getState();
	      if (action.side === 'LEFT') {
	        return newState(prev_store.culture, action.value, prev_store.second_value);
	      } else if (action.side === 'RIGHT') {
	        return newState(prev_store.culture, prev_store.first_value, action.value);
	      } else {
	        return state;
	      }
	
	    case 'SHUFFLE':
	      var rand_cult = randomCulture();
	      return newState(rand_cult, randomValue(rand_cult), randomValue(rand_cult));
	
	    default:
	      return state;
	  }
	}
	
	// updates background colors based on the current state
	function updateBackgroundGradient() {
	  var curr_state = store.getState();
	  var curr_culture = curr_state.culture;
	  var first_value = curr_state.first_value;
	  var second_value = curr_state.second_value;
	  var left_color = cultures[curr_culture][first_value];
	  var right_color = cultures[curr_culture][second_value];
	  var linear_gradient = 'linear-gradient(to right,' + left_color + ',' + right_color + ')';
	  document.body.style.background = linear_gradient;
	}
	
	// updates Culture and Values select tags to match user's choice
	function synchronizeSelectInputs() {
	  var state = store.getState();
	  var curr_culture_keys = Object.keys(cultures[state.culture]);
	  select_first_value.selectedIndex = curr_culture_keys.indexOf(state.first_value);
	  select_second_value.selectedIndex = curr_culture_keys.indexOf(state.second_value);
	  select_culture.selectedIndex = cultures_list.indexOf(store.getState().culture);
	}
	
	// clear Values and new options based on current Culture
	function populateOptions() {
	  select_first_value.innerHTML = select_second_value.innerHTML = '';
	  var state = store.getState();
	  var curr_culture_keys = Object.keys(cultures[state.culture]);
	  curr_culture_keys.forEach(add_option_value_to_select);
	}
	
	// adds a Value option to both select inputs
	function add_option_value_to_select(value) {
	  select_first_value.add(option_constructor(value));
	  select_second_value.add(option_constructor(value));
	}
	
	// constructs an option element given a Value
	function option_constructor(value) {
	  var option = document.createElement("option");
	  option.text = value;
	  option.nodeValue = value;
	  return option;
	}
	
	// populates the Culture input with options
	function populateCultures() {
	  select_culture.innerHTML = '';
	  cultures_list.forEach(function (culture) {
	    select_culture.add(option_constructor(culture));
	  });
	}
	
	// handler for left/right Values, dispatches action for value change
	function valueSelectHandler(event) {
	  var SIDE = event.target.id === 'first_value' ? 'LEFT' : 'RIGHT';
	  store.dispatch({
	    type: 'VALUE_CHANGE',
	    side: SIDE,
	    value: event.target.value
	  });
	}
	
	// handler for left/right Values, dispatches action for culture change
	function cultureSelectHandler(event) {
	  store.dispatch({
	    type: 'CULTURE_CHANGE',
	    culture: event.target.value
	  });
	}
	
	// handler for shuffle button, shuffles state
	function dispatchShuffle(e) {
	  store.dispatch({ type: 'SHUFFLE' });
	}
	
	// returns a random Value given a Culture
	function randomValue(culture) {
	  var culture_keys = Object.keys(cultures[culture]);
	  var rand_key = Math.floor(Math.random() * culture_keys.length);
	  return culture_keys[rand_key];
	}
	
	// returns a random Culture
	function randomCulture() {
	  var rand_key = Math.floor(Math.random() * cultures_list.length);
	  return cultures_list[rand_key];
	}
	
	// object lookup for current state's hex values, renders/updates to DOM
	function updateCurrentHexToDOM() {
	  var curr_state = store.getState();
	  var left_color = cultures[curr_state.culture][curr_state.first_value];
	  var right_color = cultures[curr_state.culture][curr_state.second_value];
	  document.getElementById('left_color_hex').innerText = left_color;
	  document.getElementById('right_color_hex').innerText = right_color;
	}

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	var _eastern_european;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	// src (for most): https://flatuicolors.com/
	var RED = '#E74C3C',
	    ORANGE = '#E67E22',
	    PURPLE = '#9B59B6',
	    BLUE = '#2980B9',
	    PINK = '#E91E63',
	    YELLOW = '#F1C40F',
	    GOLD = '#F39C12',
	    GREEN = '#2ECC71',
	    GREY = '#7F8C8D',
	    SILVER = '#BDC3C7',
	    WHITE = '#ECF0F1',
	    BLACK = '#000000',
	    BROWN = '#795548';
	
	// infographic inspiration:
	// http://www.informationisbeautiful.net/visualizations/colours-in-cultures/
	
	var western = {
	    'Anger': RED,
	    'Authority': BLACK,
	    'Beauty': PURPLE,
	    'Children': PINK,
	    'Cold': BLUE,
	    'Courage': ORANGE,
	    'Cowardice': YELLOW,
	    'Cruelty': PURPLE,
	    'Danger': RED,
	    'Death': BLACK,
	    'Decadence': PURPLE,
	    'Desire': RED,
	    'Earthy': BROWN,
	    'Energy': YELLOW,
	    'Erotic': ORANGE,
	    'Femininity': PINK,
	    'Flamboyance': PURPLE,
	    'Freedom': BLUE,
	    'Friendly': ORANGE,
	    'Fun': YELLOW,
	    'Good Luck': GREEN,
	    'Growth': GREEN,
	    'Happiness': YELLOW,
	    'Healing': BLUE,
	    'Heat': RED,
	    'Heaven': WHITE,
	    'Intelligence': BLUE,
	    'Jealousy': GREEN,
	    'Love': RED,
	    'Loyalty': BLUE,
	    'Luxury': WHITE,
	    'Marriage': WHITE,
	    'Modesty': PURPLE,
	    'Money': GOLD,
	    'Mourning': BLACK,
	    'Mystery': PURPLE,
	    'Nature': GREEN,
	    'Passion': RED,
	    'Peace': YELLOW,
	    'Personal Power': PURPLE,
	    'Purity': WHITE,
	    'Radicalism': RED,
	    'Rational': BLUE,
	    'Reliable': BROWN,
	    'Repels Evil': YELLOW,
	    'Respect': GREY,
	    'Style': BLACK,
	    'Truce': WHITE,
	    'Unhappiness': BLUE,
	    'Virtue': PURPLE
	};
	
	var japanese = {
	    'Art/Creativity': RED,
	    'Bad Luck': BLACK,
	    'Balance': ORANGE,
	    'Celebration': PURPLE,
	    'Children': PINK,
	    'Cold': BLUE,
	    'Courage': YELLOW,
	    'Cowardice': YELLOW,
	    'Danger': RED,
	    'Death': BLACK,
	    'Decadence': PURPLE,
	    'Deceit': YELLOW,
	    'Desire': RED,
	    'Energy': ORANGE,
	    'Erotic': PINK,
	    'Eternity': GREEN,
	    'Evil': BLACK,
	    'Excitement': RED,
	    'Flamboyance': ORANGE,
	    'God': PURPLE,
	    'Good Luck': GREEN,
	    'Healthy': PINK,
	    'Heaven': YELLOW,
	    'Holiness': WHITE,
	    'Ilness': YELLOW,
	    'Insight': PURPLE,
	    'Intelligence': SILVER,
	    'Religion': YELLOW,
	    'Jealousy': GREEN,
	    'Joy': YELLOW,
	    'Life': BLUE,
	    'Love': RED,
	    'Loyalty': BLUE,
	    'Modesty': GREY,
	    'Money': BLUE,
	    'Mystery': PURPLE,
	    'Nature': GREEN,
	    'Passion': RED,
	    'Peace': BLUE,
	    'Purity': WHITE,
	    'Rational': BLUE,
	    'Reliable': GREY,
	    'Repels Evil': RED,
	    'Respect': WHITE,
	    'Strength': RED,
	    'Style': BLACK,
	    'Truce': WHITE,
	    'Unhappiness': BLACK,
	    'Warmth': ORANGE,
	    'Wisdom': PURPLE
	};
	
	var hindu = {
	    'Anger': BLACK,
	    'Art/Creativity': BLUE,
	    'Compassion': GREEN,
	    'Courage': ORANGE,
	    'Death': WHITE,
	    'Desire': ORANGE,
	    'Energy': RED,
	    'Erotic': RED,
	    'Evil': BLACK,
	    'Fun': YELLOW,
	    'God': YELLOW,
	    'Gods': BLUE,
	    'Happiness': GREEN,
	    'Heat': RED,
	    'Illness': YELLOW,
	    'Insight': GREEN,
	    'Intelligence': WHITE,
	    'Intuition': PURPLE,
	    'Religion': GREEN,
	    'Joy': YELLOW,
	    'Life': GREEN,
	    'Love': GREEN,
	    'Marriage': RED,
	    'Passion': RED,
	    'Peace': WHITE,
	    'Penance': BLACK,
	    'Personal Power': YELLOW,
	    'Repels Evil': YELLOW,
	    'Truce': WHITE,
	    'Wisdom': PURPLE
	};
	
	var native_american = {
	    'Balance': BLACK,
	    'Cold': BLUE,
	    'Danger': YELLOW,
	    'Death': BLACK,
	    'Friendly': GREY,
	    'Gratitude': PURPLE,
	    'Happiness': WHITE,
	    'Healing': ORANGE,
	    'Insight': YELLOW,
	    'Intuition': BLUE,
	    'Learning': ORANGE,
	    'Love': YELLOW,
	    'Passion': RED,
	    'Peace': WHITE,
	    'Personal Power': GREEN,
	    'Respect': SILVER,
	    'Self-Cultivation': BLACK,
	    'Success': RED,
	    'Trouble': BLUE,
	    'Unhappiness': BLUE,
	    'Wisdom': BROWN
	};
	
	var chinese = {
	    'Celebration': BLACK,
	    'Death': WHITE,
	    'Earthy': BROWN,
	    'Family': ORANGE,
	    'Fertility': RED,
	    'Good Luck': RED,
	    'Growth': GREEN,
	    'Happiness': RED,
	    'Healthy': YELLOW,
	    'Learning': ORANGE,
	    'Life': GREEN,
	    'Marriage': RED,
	    'Mourning': WHITE,
	    'Repels Evil': GREEN,
	    'Respect': YELLOW,
	    'Royalty': YELLOW,
	    'Success': RED,
	    'Money': GOLD,
	    'Purity': WHITE,
	    'Truce': WHITE
	};
	
	var asian = {
	    'Balance': GREEN,
	    'Children': WHITE,
	    'Eternity': GREEN,
	    'Evil': BLACK,
	    'Excitement': GREEN,
	    'Flamboyance': PURPLE,
	    'Happiness': RED,
	    'Holiness': YELLOW,
	    'Intelligence': BLACK,
	    'Money': GOLD,
	    'Penance': BLACK,
	    'Power': YELLOW,
	    'Purity': WHITE,
	    'Repels Evil': YELLOW,
	    'Self Cultivation': BLACK,
	    'Strength': YELLOW,
	    'Success': RED
	};
	
	var eastern_european = (_eastern_european = {
	    'Anger': RED,
	    'Heat': RED,
	    'Beauty': RED,
	    'Good Luck': RED
	}, _defineProperty(_eastern_european, 'Heat', RED), _defineProperty(_eastern_european, 'Love', RED), _defineProperty(_eastern_european, 'Loyalty', BLUE), _defineProperty(_eastern_european, 'Mourning', YELLOW), _defineProperty(_eastern_european, 'Passion', RED), _defineProperty(_eastern_european, 'Power', RED), _defineProperty(_eastern_european, 'Radicalism', RED), _defineProperty(_eastern_european, 'Truce', WHITE), _defineProperty(_eastern_european, 'Trust', WHITE), _defineProperty(_eastern_european, 'Virtue', BLUE), _defineProperty(_eastern_european, 'Wisdom', BLUE), _eastern_european);
	
	var muslim = {
	    'Death': SILVER,
	    'God': GREEN,
	    'Good Luck': GREEN,
	    'Heat': RED,
	    'Heaven': GREEN,
	    'Religion': GREEN,
	    'Peace': SILVER,
	    'Purity': SILVER,
	    'Strength': YELLOW,
	    'Truce': SILVER
	};
	
	var african = {
	    'Anger': RED,
	    'Good Luck': RED,
	    'Religion': GREEN,
	    'Learning': GREEN,
	    'Life': BLUE,
	    'Peace': BLUE,
	    'Success': GREEN,
	    'Truce': GREY
	};
	
	var south_american = {
	    'Danger': RED,
	    'Death': GREEN,
	    'Mourning': PURPLE,
	    'Success': RED,
	    'Trouble': BLUE
	};
	
	// String->Object lookup table
	var cultures = {
	    'Western': western,
	    'Japanese': japanese,
	    'Hindu': hindu,
	    'Native American': native_american,
	    'Chinese': chinese,
	    'Asian': asian,
	    'Eastern European': eastern_european,
	    'Muslim': muslim,
	    'African': african,
	    'South American': south_american
	};
	
	// alphabetized array of cultures
	var cultures_list = ["African", "Asian", "Chinese", "Eastern European", "Hindu", "Japanese", "Muslim", "Native American", "South American", "Western"];
	
	exports.cultures = cultures;
	exports.cultures_list = cultures_list;

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	// 1. Google Analytics
	// 2. rotates throughout the flat UI colors for the heart at the border-bottom.
	// 3. 3rd-party library for inline-tweets sharing functionality.
	
	module.exports = function () {
	    'use strict';
	
	    (function (i, s, o, g, r, a, m) {
	        i['GoogleAnalyticsObject'] = r;i[r] = i[r] || function () {
	            (i[r].q = i[r].q || []).push(arguments);
	        }, i[r].l = 1 * new Date();a = s.createElement(o), m = s.getElementsByTagName(o)[0];a.async = 1;a.src = g;m.parentNode.insertBefore(a, m);
	    })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
	    ga('create', 'UA-76555000-1', 'auto');
	    ga('send', 'pageview');
	    // loops through heart icon (footer) colors
	    var $heart = document.getElementById('#heart');
	    var flatUIColors = ['#34495e', '#5900ff', '#9b59b6', '#3498db', '#2ecc71', '#1abc9c', '#f1c40f', '#ecf0f1', '#e67e22', '#e74c3c', '#95a5a6'];
	    var counter = 0;
	    var updateInterval = 1000;
	    setInterval(function changeHeartColor() {
	        if (!flatUIColors[counter]) counter = 0;
	        heart.style.color = flatUIColors[counter++];
	    }, updateInterval);
	    // inlineTweet.js
	    function buildInlineTweet(e) {
	        var t = e.innerHTML,
	            i = "%22" + encodeURIComponent(t) + "%22",
	            n = e.dataset.inlineTweetUrl ? e.dataset.inlineTweetUrl : window.location.href,
	            a = e.dataset.inlineTweetVia ? "&via=" + e.dataset.inlineTweetVia : "",
	            r = e.dataset.inlineTweetTags ? "&hashtags=" + e.dataset.inlineTweetTags : "",
	            l = "https://twitter.com/intent/tweet/?text=" + i + "&url=" + n + a + r,
	            d = document.createElement("span");
	        d.innerHTML = t;
	        var s = document.createElement("a");
	        s.target = "_blank", s.href = l, s.appendChild(d), s.innerHTML += twitterLogo, e.innerHTML = "", e.appendChild(s);
	    }
	    var inlineTweets = document.querySelectorAll("*[data-inline-tweet]");
	    if (inlineTweets) for (var twitterLogo = '<svg style="height: 0.7em;" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" version="1.1" xmlns:cc="http://creativecommons.org/ns#" viewBox="0 0 182.66667 150.66667" xmlns:dc="http://purl.org/dc/elements/1.1/"><metadata id="metadata8"><rdf:RDF><cc:Work rdf:about=""><dc:format>image/svg+xml</dc:format><dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/></cc:Work></rdf:RDF></metadata><defs id="defs6"><clipPath id="clipPath20" clipPathUnits="userSpaceOnUse"><path id="path18" d="m0 10.012h1366.9v1110.9h-1366.9z"/></clipPath></defs><g id="g10" transform="matrix(1.3333 0 0 -1.3333 0 150.67)"><g id="g12" transform="scale(.1)"><g id="g14"><g id="g16" clip-path="url(#clipPath20)"><path id="path22" d="m1366.9 989.39c-50.27-22.309-104.33-37.387-161.05-44.18 57.89 34.723 102.34 89.679 123.28 155.15-54.18-32.15-114.18-55.47-178.09-68.04-51.13 54.49-124.02 88.55-204.68 88.55-154.89 0-280.43-125.55-280.43-280.43 0-21.988 2.457-43.398 7.258-63.91-233.08 11.68-439.72 123.36-578.04 293.01-24.141-41.4-37.969-89.567-37.969-140.97 0-97.308 49.489-183.13 124.76-233.44-45.969 1.437-89.218 14.058-127.03 35.078-0.043-1.18-0.043-2.348-0.043-3.52 0-135.9 96.68-249.22 224.96-275-23.512-6.41-48.281-9.8-73.86-9.8-18.089 0-35.628 1.711-52.781 5 35.711-111.41 139.26-192.5 262-194.77-96.058-75.23-216.96-120.04-348.36-120.04-22.621 0-44.961 1.332-66.918 3.91 124.16-79.568 271.55-125.98 429.94-125.98 515.82 0 797.86 427.31 797.86 797.93 0 12.153-0.28 24.223-0.79 36.25 54.77 39.571 102.31 88.95 139.93 145.2" fill="#55ACEE"/></g></g></g></g></svg>', i = 0; i < inlineTweets.length; i++) {
	        buildInlineTweet(inlineTweets[i]);
	    }
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,